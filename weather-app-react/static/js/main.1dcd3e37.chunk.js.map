{"version":3,"sources":["components/Info.js","components/Form.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Info","React","Component","Form","onSubmit","this","props","weather","type","name","placeholder","Weather","loading","color","height","width","timeout","className","city","temp","sunrise","sunset","error","API_KEY","App","state","country","getWeather","e","calcTime","a","time","date","Date","setTime","newTime","getHours","getMinutes","getSeconds","console","log","preventDefault","setState","target","elements","value","fetch","api_url","json","data","main","sys","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1dcd3e37.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Info extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Weather App</h2>\r\n                <p>Weather in your area</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Info;","import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.weather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"Your city\"/>\r\n                <button>Get weather</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nclass Weather extends React.Component {\r\n    render() {\r\n        if(!this.props.loading) {\r\n            return (\r\n                <div className=\"infoWeath\">\r\n                    {this.props.city &&\r\n                        <div>\r\n                            <p>Location: {this.props.city}</p>\r\n                            <p>Temperature: {this.props.temp}</p>\r\n                            <p>Sunrise: {this.props.sunrise}</p>\r\n                            <p>Sunset: {this.props.sunset}</p>\r\n                        </div>\r\n                    }\r\n                    <p className=\"error\">{this.props.error}</p>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <Loader\r\n                    type=\"TailSpin\"\r\n                    color=\"#00BFFF\"\r\n                    height={100}\r\n                    width={100}\r\n                    timeout={3000}\r\n                />\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default Weather;","\nimport React from 'react';\nimport './App.css';\nimport Info from './components/Info';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\n\nconst API_KEY = \"105f58d4cedeb3f3e15d9adde170dbb6\";\n\nclass App extends React.Component {\n  state = {\n    temp: null,\n    city: null,\n    country: null,\n    sunrise: null,\n    sunset: null,\n    error: null,\n    loading: false\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    this.setState({\n      loading: true\n    })\n\n    const city = e.target.elements.city.value;\n    console.log(city);\n\n    const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`)\n    const data = await api_url.json();\n    console.log(data);\n\n    function calcTime(time) {\n      var date = new Date();\n      date.setTime(time);\n      let newTime = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n      console.log(newTime)\n      return newTime\n    };\n\n    if(city) {\n      this.setState({\n        temp: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        sunrise: calcTime(data.sys.sunrise),\n        sunset: calcTime(data.sys.sunset),\n        error: null,\n        loading: false\n      });\n      console.log(this.state);\n    } else {\n      this.setState({\n        temp: null,\n        city: null,\n        country: null,\n        sunrise: null,\n        sunset: null,\n        error: \"What`s the city again?\",\n        loading: false\n      });\n    }\n\n  }\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-sm-5 info\">\n                <Info/>\n              </div>\n              <div className=\"col-sm-7 form\">\n                <Form weather={this.getWeather}/>\n                <Weather\n                  temp={this.state.temp}\n                  city={this.state.city}\n                  country={this.state.country}\n                  sunrise={this.state.sunrise}\n                  sunset={this.state.sunset}\n                  error={this.state.error}\n                  loading={this.state.loading}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}